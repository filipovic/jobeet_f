<?php

/* SensioDistributionBundle:Configurator:form.html.twig */
class __TwigTemplate_9ced73818700f8d3c7d5c73ade5a1ce59818dded64c5d06435c4d135e53f8218 extends Twig_Template
{
    public function __construct(Twig_Environment $env)
    {
        parent::__construct($env);

        $this->parent = $this->env->loadTemplate("form_div_layout.html.twig");

        $this->blocks = array(
            'form_rows' => array($this, 'block_form_rows'),
            'form_row' => array($this, 'block_form_row'),
            'form_label' => array($this, 'block_form_label'),
        );
    }

    protected function doGetParent(array $context)
    {
        return "form_div_layout.html.twig";
    }

    protected function doDisplay(array $context, array $blocks = array())
    {
        $this->parent->display($context, array_merge($this->blocks, $blocks));
    }

    // line 3
    public function block_form_rows($context, array $blocks = array())
    {
        // line 4
        echo "    <div class=\"symfony-form-errors\">
        ";
        // line 5
        echo $this->env->getExtension('form')->renderer->searchAndRenderBlock($this->getContext($context, "form"), 'errors');
        echo "
    </div>
    ";
        // line 7
        $context['_parent'] = (array) $context;
        $context['_seq'] = twig_ensure_traversable($this->getContext($context, "form"));
        foreach ($context['_seq'] as $context["_key"] => $context["child"]) {
            // line 8
            echo "        ";
            echo $this->env->getExtension('form')->renderer->searchAndRenderBlock($this->getContext($context, "child"), 'row');
            echo "
    ";
        }
        $_parent = $context['_parent'];
        unset($context['_seq'], $context['_iterated'], $context['_key'], $context['child'], $context['_parent'], $context['loop']);
        $context = array_intersect_key($context, $_parent) + $_parent;
    }

    // line 12
    public function block_form_row($context, array $blocks = array())
    {
        // line 13
        echo "    <div class=\"symfony-form-row\">
        ";
        // line 14
        echo $this->env->getExtension('form')->renderer->searchAndRenderBlock($this->getContext($context, "form"), 'label');
        echo "
        <div class=\"symfony-form-field\">
            ";
        // line 16
        echo $this->env->getExtension('form')->renderer->searchAndRenderBlock($this->getContext($context, "form"), 'widget');
        echo "
            <div class=\"symfony-form-errors\">
                ";
        // line 18
        echo $this->env->getExtension('form')->renderer->searchAndRenderBlock($this->getContext($context, "form"), 'errors');
        echo "
            </div>
        </div>
    </div>
";
    }

    // line 24
    public function block_form_label($context, array $blocks = array())
    {
        // line 25
        echo "    ";
        if (twig_test_empty($this->getContext($context, "label"))) {
            // line 26
            echo "        ";
            $context["label"] = call_user_func_array($this->env->getFilter('humanize')->getCallable(), array($this->getContext($context, "name")));
            // line 27
            echo "    ";
        }
        // line 28
        echo "    <label for=\"";
        echo twig_escape_filter($this->env, $this->getContext($context, "id"), "html", null, true);
        echo "\">
        ";
        // line 29
        echo twig_escape_filter($this->env, $this->env->getExtension('translator')->trans($this->getContext($context, "label")), "html", null, true);
        echo "
        ";
        // line 30
        if ($this->getContext($context, "required")) {
            // line 31
            echo "            <span class=\"symfony-form-required\" title=\"This field is required\">*</span>
        ";
        }
        // line 33
        echo "    </label>
";
    }

    public function getTemplateName()
    {
        return "SensioDistributionBundle:Configurator:form.html.twig";
    }

    public function isTraitable()
    {
        return false;
    }

    public function getDebugInfo()
    {
        return array (  806 => 488,  803 => 487,  792 => 485,  788 => 484,  784 => 482,  771 => 481,  742 => 475,  706 => 472,  702 => 470,  698 => 469,  694 => 468,  686 => 466,  682 => 465,  678 => 464,  675 => 463,  673 => 462,  656 => 461,  630 => 455,  621 => 452,  618 => 451,  616 => 450,  565 => 414,  525 => 408,  520 => 406,  244 => 136,  378 => 157,  334 => 141,  328 => 139,  363 => 153,  353 => 149,  255 => 101,  212 => 78,  431 => 189,  408 => 176,  401 => 172,  373 => 156,  351 => 120,  323 => 128,  207 => 75,  356 => 328,  797 => 266,  794 => 265,  789 => 260,  782 => 256,  776 => 253,  772 => 251,  770 => 250,  767 => 249,  761 => 247,  759 => 246,  756 => 245,  750 => 243,  748 => 242,  745 => 476,  739 => 239,  737 => 238,  734 => 237,  728 => 235,  726 => 234,  723 => 473,  720 => 232,  716 => 187,  710 => 186,  696 => 182,  691 => 181,  688 => 180,  683 => 179,  680 => 178,  667 => 164,  661 => 162,  658 => 161,  655 => 160,  649 => 157,  645 => 460,  642 => 155,  636 => 154,  631 => 151,  625 => 453,  617 => 148,  614 => 147,  610 => 146,  602 => 449,  600 => 142,  597 => 141,  594 => 140,  587 => 139,  572 => 135,  569 => 134,  566 => 133,  563 => 131,  547 => 411,  544 => 127,  536 => 125,  533 => 124,  519 => 160,  515 => 404,  512 => 157,  503 => 121,  487 => 115,  482 => 114,  479 => 113,  472 => 77,  462 => 202,  459 => 74,  451 => 71,  433 => 65,  417 => 59,  405 => 56,  391 => 50,  372 => 37,  317 => 230,  301 => 222,  290 => 119,  231 => 83,  370 => 36,  343 => 146,  330 => 87,  327 => 114,  320 => 127,  313 => 82,  310 => 81,  287 => 216,  271 => 66,  262 => 98,  180 => 104,  12 => 34,  568 => 179,  553 => 129,  545 => 173,  540 => 171,  534 => 169,  532 => 168,  517 => 161,  507 => 123,  488 => 153,  477 => 150,  470 => 135,  467 => 134,  463 => 133,  460 => 132,  449 => 198,  446 => 197,  426 => 102,  419 => 98,  410 => 96,  392 => 83,  388 => 107,  386 => 159,  382 => 93,  380 => 158,  369 => 136,  367 => 155,  333 => 272,  302 => 125,  296 => 121,  226 => 84,  316 => 121,  299 => 112,  293 => 120,  284 => 106,  281 => 114,  279 => 104,  275 => 105,  210 => 77,  174 => 65,  399 => 158,  394 => 168,  359 => 140,  357 => 123,  352 => 30,  348 => 140,  345 => 147,  325 => 129,  308 => 226,  276 => 111,  270 => 102,  245 => 203,  239 => 201,  237 => 86,  234 => 84,  202 => 77,  167 => 60,  155 => 47,  681 => 404,  676 => 168,  664 => 394,  659 => 392,  650 => 388,  639 => 380,  633 => 377,  629 => 376,  613 => 366,  605 => 144,  595 => 354,  588 => 350,  581 => 137,  577 => 344,  575 => 341,  567 => 337,  557 => 177,  550 => 326,  542 => 321,  538 => 319,  531 => 312,  526 => 164,  514 => 306,  509 => 124,  492 => 295,  481 => 290,  466 => 76,  456 => 273,  452 => 272,  445 => 267,  443 => 261,  429 => 188,  424 => 254,  422 => 184,  415 => 180,  396 => 157,  383 => 150,  366 => 142,  346 => 28,  331 => 140,  304 => 79,  267 => 101,  257 => 61,  253 => 100,  213 => 78,  58 => 15,  150 => 55,  134 => 39,  194 => 68,  127 => 35,  344 => 119,  340 => 145,  338 => 135,  335 => 134,  315 => 131,  295 => 275,  288 => 118,  259 => 103,  249 => 55,  190 => 76,  161 => 63,  701 => 183,  695 => 210,  692 => 209,  690 => 467,  684 => 205,  674 => 397,  669 => 202,  657 => 200,  654 => 390,  651 => 198,  643 => 381,  640 => 192,  623 => 373,  606 => 189,  601 => 187,  596 => 186,  593 => 185,  590 => 184,  584 => 138,  580 => 178,  578 => 136,  573 => 340,  556 => 130,  539 => 126,  535 => 172,  530 => 410,  527 => 409,  524 => 169,  521 => 169,  518 => 307,  516 => 166,  513 => 160,  504 => 158,  500 => 120,  498 => 157,  495 => 155,  493 => 116,  490 => 154,  486 => 292,  471 => 129,  468 => 128,  455 => 147,  450 => 145,  441 => 196,  439 => 195,  434 => 138,  420 => 249,  418 => 128,  404 => 124,  395 => 51,  389 => 160,  377 => 82,  371 => 156,  361 => 152,  358 => 151,  349 => 29,  347 => 118,  342 => 137,  339 => 316,  336 => 99,  332 => 116,  329 => 131,  326 => 138,  324 => 113,  321 => 135,  319 => 90,  311 => 227,  307 => 128,  297 => 104,  291 => 102,  289 => 113,  282 => 213,  277 => 68,  272 => 76,  250 => 206,  233 => 87,  228 => 83,  223 => 196,  191 => 67,  178 => 59,  175 => 58,  76 => 34,  318 => 111,  306 => 107,  303 => 106,  300 => 105,  292 => 218,  286 => 112,  280 => 69,  274 => 110,  263 => 95,  256 => 96,  242 => 140,  192 => 23,  185 => 74,  170 => 84,  165 => 83,  20 => 1,  53 => 11,  137 => 95,  97 => 41,  34 => 4,  126 => 55,  118 => 49,  114 => 50,  70 => 19,  90 => 27,  110 => 22,  84 => 25,  65 => 22,  265 => 105,  260 => 62,  248 => 97,  236 => 63,  232 => 88,  216 => 79,  211 => 84,  195 => 77,  188 => 90,  184 => 63,  152 => 46,  100 => 39,  81 => 24,  172 => 57,  153 => 77,  146 => 34,  113 => 38,  148 => 44,  104 => 31,  77 => 25,  225 => 83,  222 => 83,  218 => 77,  215 => 78,  205 => 195,  200 => 72,  197 => 69,  186 => 54,  181 => 65,  160 => 52,  129 => 56,  124 => 43,  23 => 12,  480 => 151,  474 => 149,  469 => 158,  461 => 149,  457 => 131,  453 => 199,  444 => 142,  440 => 148,  437 => 66,  435 => 258,  430 => 103,  427 => 62,  423 => 60,  413 => 134,  409 => 58,  407 => 95,  402 => 55,  398 => 121,  393 => 119,  387 => 164,  384 => 116,  381 => 120,  379 => 119,  374 => 81,  368 => 112,  365 => 34,  362 => 141,  360 => 109,  355 => 150,  341 => 118,  337 => 103,  322 => 101,  314 => 99,  312 => 130,  309 => 129,  305 => 115,  298 => 120,  294 => 111,  285 => 81,  283 => 115,  278 => 98,  268 => 73,  264 => 72,  258 => 94,  252 => 68,  247 => 66,  241 => 93,  229 => 87,  220 => 81,  214 => 61,  177 => 63,  169 => 58,  140 => 58,  132 => 57,  128 => 44,  107 => 48,  61 => 12,  273 => 210,  269 => 107,  254 => 60,  243 => 92,  240 => 86,  238 => 139,  235 => 89,  230 => 105,  227 => 86,  224 => 81,  221 => 78,  219 => 129,  217 => 79,  208 => 76,  204 => 73,  179 => 72,  159 => 49,  143 => 51,  135 => 62,  119 => 40,  102 => 30,  71 => 23,  67 => 16,  63 => 18,  59 => 13,  87 => 26,  94 => 21,  89 => 35,  85 => 26,  75 => 22,  68 => 20,  56 => 12,  28 => 3,  38 => 5,  24 => 3,  26 => 6,  21 => 2,  31 => 3,  25 => 35,  201 => 57,  196 => 92,  183 => 82,  171 => 113,  166 => 54,  163 => 82,  158 => 80,  156 => 62,  151 => 59,  142 => 42,  138 => 50,  136 => 71,  121 => 50,  117 => 39,  105 => 25,  91 => 29,  62 => 14,  49 => 14,  19 => 1,  93 => 28,  88 => 28,  78 => 24,  46 => 13,  44 => 8,  27 => 3,  79 => 18,  72 => 18,  69 => 21,  47 => 10,  40 => 11,  37 => 7,  22 => 2,  246 => 96,  157 => 58,  145 => 74,  139 => 49,  131 => 45,  123 => 61,  120 => 31,  115 => 40,  111 => 47,  108 => 33,  101 => 31,  98 => 29,  96 => 30,  83 => 33,  74 => 27,  66 => 25,  55 => 12,  52 => 12,  50 => 10,  43 => 9,  41 => 7,  35 => 4,  32 => 6,  29 => 3,  209 => 24,  203 => 73,  199 => 93,  193 => 70,  189 => 66,  187 => 75,  182 => 87,  176 => 86,  173 => 85,  168 => 61,  164 => 111,  162 => 59,  154 => 60,  149 => 62,  147 => 75,  144 => 42,  141 => 73,  133 => 51,  130 => 46,  125 => 42,  122 => 41,  116 => 57,  112 => 36,  109 => 52,  106 => 51,  103 => 44,  99 => 23,  95 => 39,  92 => 43,  86 => 25,  82 => 25,  80 => 24,  73 => 33,  64 => 17,  60 => 20,  57 => 19,  54 => 15,  51 => 13,  48 => 10,  45 => 8,  42 => 7,  39 => 6,  36 => 5,  33 => 4,  30 => 3,);
    }
}
